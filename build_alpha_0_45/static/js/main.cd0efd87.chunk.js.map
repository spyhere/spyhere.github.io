{"version":3,"sources":["Sounds/metro_1.mp3","Sounds/metro_other.mp3","Sounds/clap01.mp3","notes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","values","concat","measureReassign","names4Beaming","beamNum","barsQuant","bars","measure","pauseValue","easyOBProb","tripletValue","easyGrouping","linkIns","linkOut","lvl","groupRest","showBeat","noteValues","whole","half","quarter","eighth","sixteenth","thirtySecond","noteValuesNames","Object","keys","noteProbability","maxNoteValue","dottedValues","dottedValuesNames","dottedProbability","maxDottedValue","groupingValues","groupingValuesNames","groupingProbability","maxGroupingValue","probability","simValIns","simValInsNames","simValInsProbability","maxSimValsIns","ind","indInner","fill","simpleK","dotsK","groupK","lvlK","arrayOfProbability","generatingValues","bar","remained","valuesInd","Math","round","random","forEach","x","index","length","Number","isInteger","min","safeMin","linkOutPr","generatingIndex","indInnerInner","insideValue","checkOut","some","y","remainedIns","run","indIns","indForCheck","push","beaming","groupingOut","ceil","fillIns","groupingIns","barGroup","measureGroup","minGroupEasy","fillGroup","coefGroup","remainedGroup","minGroup","indInnerGroup","generatingGroupingValues","String","z","unshift","minimum","tuplet","minVal","maxVal","check","easyOnB","randomInd","n","beamFill","beamGr","beamGrNames","tup","gr","Array","isArray","test","a","splice","RegExp","match","join","reading","testArr","valInTup","thirty","App","props","state","bpm","beat","beatNumb","receivedVal","receivedValTimeouts","metronome","tick01","React","createRef","tick02","note01","nextGen","bind","beatReading","beatReadingFunc","stop","console","clear","tupletState","arr","this","setState","setTimeout","current","volume","metronomeTemp","metronomeFill","wholeBar","play","setInterval","from","document","querySelectorAll","temp","shift","classList","toggle","load","className","rand","floor","tempRead","tempMetronome","clearTimeout","contains","reverse","updateData","i","sound","soundClone","cloneNode","ref","src","type","onClick","map","count","style","position","height","key","opacity","top","left","display","indI","marginRight","marginLeft","ch","link","elem","split","slice","id","Component","Linked","nextState","st","width","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd0efd87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/metro_1.14d657e7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/metro_other.29b77406.mp3\";","module.exports = __webpack_public_path__ + \"static/media/clap01.3019756d.mp3\";","let valuesSimple = [[\"whole\", \"whole--rest\", 4],[\"half\", \"half--rest\", 2],[\"quarter\", \"quarter--rest\", 1],\r\n[\"eighth\", \"eighth--rest\", 0.5],[\"sixteenth\", \"sixteenth--rest\", 0.25],[\"thirty-second\", \"thirty-second--rest\", 0.125]];\r\nlet valuesDots = [[\"whole--dot\", \"whole--dot--rest\", 6],[\"half--dot\",\"half--dot--rest\",3],[\"quarter--dot\",\"quarter--dot--rest\",1.5],\r\n[\"eighth--dot\",\"eighth--dot--rest\",0.75],[\"sixteenth--dot\",\"sixteenth--dot--rest\",0.375],[\"thirty-second--dot\",\"thirty-second--dot--rest\",0.1875]];\r\nlet valuesGroupings = [[\"whole--triplet\",\"whole--quinteplet\", 4],[\"half--triplet\",\"half--quinteplet\", 2],[\"quarter--triplet\",\"quarter--quinteplet\",1],\r\n[\"eighth--triplet\",\"eighth--quinteplet\",0.5]];\r\n\r\nlet values = [valuesSimple].concat([valuesDots]);\r\nvalues = values.concat([valuesGroupings]); // THE WHOLE ARRAY OF NOTE VALUES\r\n\r\nexport let measureReassign = {     // GIVING MEASURE IN NUMBER EQUIVALENT\r\n    \"two_quarters\": 2,\r\n    \"three_quarters\": 3,\r\n    \"four_quarters\": 4,\r\n    \"five_quarters\": 5,\r\n    \"seven_quarters\": 7,\r\n    \"five_eights\": 2.5,\r\n    \"six_eights\": 3\r\n}\r\n\r\nlet names4Beaming = [/eighth|sixteenth|thirty-second/,/rest/]; // REGEX TO MAKE BEAMING\r\nlet beamNum = 1; // THE QUANTITY OF QUARTERS TO BEAM\r\n\r\n\r\nlet barsQuant = 4;  // CHOOSEN QUANTITY OF BARS\r\nlet bars = [];      // CHOOSEN NOTE VALUES\r\nlet measure = 4;    // MEASURE IN QUARTER EQUIVALENT\r\nlet pauseValue = 10; // POSSIBILITY OF PAUSE\r\nlet easyOBProb = 20; // PROBABILITY OF LONGER NOTE VALUE ON BEAT\r\nlet tripletValue = 90; // POSSIBILITY OF TRIPLET; 100 - tripletValue = POSSIBILITY OF QUINTEPLET\r\nlet easyGrouping = 100; // DIFFICULTY OF GROUPINGS IN TUPLETS\r\nlet linkIns = true; // ALLOWING GROPINGS WITH LINKS INSIDE THE BAR\r\nlet linkOut = 0; // PROBABILITY GROUPINGS WITH LINKS OUTSIDE THE BAR\r\nlet lvl = 0;        // LEVEL OF DIFFICULTY\r\nlet groupRest = true; // GROUPING REST\r\nlet showBeat = false; // NOT ALLOWING TO START THE GROUP BEFORE STRONG BEAT\r\nlet fixingBeatProb = 70; // PROBABILITY TO MOVE RHYTM TO STRONG OR WEAK BEAT \r\n\r\n// PROBABILITY OF SIMPLE VALUES****\r\nlet noteValues = {  // PROBABILITY \r\n    whole: 5,   //5\r\n    half: 11,   //11\r\n    quarter: 44,//44\r\n    eighth: 56, //56\r\n    sixteenth: 64, //64\r\n    thirtySecond: 0 //66\r\n}\r\nlet noteValuesNames = Object.keys(noteValues); \r\n\r\nlet noteProbability = []; // ARRAY WITH \"noteValuesNames\" + PERCENTAGE OF PROBABILITY\r\nlet maxNoteValue = null;  // MAXIMUM PERCENTAGE VALUE OF PROBABILITY OF \"noteValue\";\r\n\r\n// PROBABILITY OF SIMPLE VALUES****\r\n\r\n// PROBABILITY OF DOTTED VALUES****\r\nlet dottedValues = {\r\n    whole: -0.1,//0\r\n    half: -0.1,//0\r\n    quarter: 10,//10 \r\n    eighth: 30, //30    enable noteValues sixteenth\r\n    sixteenth: 0, //35  enable noteValues thirtySecond\r\n    thirtySecond: 0 //66\r\n}\r\nlet dottedValuesNames = Object.keys(dottedValues);\r\n\r\nlet dottedProbability = [];\r\nlet maxDottedValue = null;\r\n\r\n// PROBABILITY OF DOTTED VALUES****\r\n\r\n// PROBABILITY OF GROUPING VALUES****\r\nlet groupingValues = {\r\n    whole: -0.1,    //0\r\n    half: 3,        //3\r\n    quarter: 10,    //10  simValIns triplet=eights, quinteplet=sixteenth\r\n    eighth: 12     //12 \r\n}\r\nlet groupingValuesNames = Object.keys(groupingValues);\r\n\r\nlet groupingProbability = [];\r\nlet maxGroupingValue = null;\r\n\r\n// PROBABILITY OF GROUPING VALUES****\r\n\r\n// THE ARRAY OF PROBABILITIES\r\nlet probability = null; \r\n\r\n// PROBABILITY OF VALUES INSIDE THE TUPLET\r\nlet simValIns = {\r\n    whole: -0.1,\r\n    half: 5,\r\n    quarter: 15,\r\n    eighth: 20,\r\n    sixteenth: 25,\r\n    thirtySecond: 30\r\n}\r\n\r\nlet simValInsNames = Object.keys(simValIns);\r\n\r\nlet simValInsProbability = [];\r\nlet maxSimValsIns = null;\r\n\r\n// PROBABILITY OF VALUES INSIDE THE TUPLET\r\n\r\n\r\n\r\nlet ind = 0;        // INDEX OF ARRAY: SIMPLE, DOTS, GROUPINGS\r\nlet indInner = 0;   // INDEX INSIDE THE ARRAY\r\nlet fill = 0;       // FILLING OF THE BAR\r\n\r\n// DETERMINING THE PROBABILITY OF DIFFERENT NOTES VALUES\r\nlet simpleK = 75; // 75 \r\nlet dotsK = 95;   // 20 95\r\nlet groupK = 100;  // 5 100\r\nlet lvlK = null;  // MAXIMUM VALUE TO DETERMINE \"ind\"\r\nlet arrayOfProbability = [simpleK,dotsK,groupK];\r\n\r\n\r\n\r\n\r\nexport function updateData(state) {\r\n    beamNum = state.beamNum;\r\n    barsQuant = state.barsQuant;\r\n    measure = measureReassign[state.measure];\r\n    pauseValue = state.pauseValue;\r\n    easyOBProb = state.easyOBProb;\r\n    tripletValue = state.tripletValue;\r\n    easyGrouping = state.easyGrouping;\r\n    linkIns = state.linkIns;\r\n    linkOut = state.linkOut;\r\n    lvl = state.lvl;\r\n    simpleK = state.simpleK;\r\n    dotsK = state.dotsK;\r\n    groupK = state.groupK;\r\n    lvlK = state.lvlK;\r\n    groupRest = state.groupRest;\r\n    showBeat = state.showBeat;\r\n    //////////////////\r\n    noteValues = state.noteValues;\r\n    noteProbability = [];\r\n    maxNoteValue = null;\r\n\r\n    for (let n in noteValuesNames) {\r\n        if (noteValues[noteValuesNames[n]] !== 0) {\r\n            noteProbability.push([noteValuesNames[n]]);\r\n            noteProbability[n].push(noteValues[noteValuesNames[n]]);\r\n        }\r\n    }\r\n    maxNoteValue = noteProbability.reverse()[0][1];\r\n    noteProbability.reverse();\r\n    //\r\n    dottedValues = state.dottedValues;\r\n    dottedProbability = [];\r\n    maxDottedValue = null;\r\n\r\n    for (let n in dottedValuesNames) {\r\n        if (dottedValues[dottedValuesNames[n]] !== 0) {\r\n            dottedProbability.push([dottedValuesNames[n]]);\r\n            dottedProbability[n].push(dottedValues[dottedValuesNames[n]]);\r\n        }\r\n    }\r\n    maxDottedValue = dottedProbability.reverse()[0][1];\r\n    dottedProbability.reverse();\r\n    //\r\n    groupingValues = state.groupingValues;\r\n    groupingProbability = [];\r\n    maxGroupingValue = null;\r\n\r\n    for (let n in groupingValuesNames) {    \r\n        if (groupingValues[groupingValuesNames[n]] !== 0) {\r\n            groupingProbability.push([groupingValuesNames[n]]);\r\n            groupingProbability[n].push(groupingValues[groupingValuesNames[n]]);\r\n        }\r\n    }\r\n    maxGroupingValue = groupingProbability.reverse()[0][1];\r\n    groupingProbability.reverse();\r\n    //\r\n    simValIns = state.simValIns;\r\n    simValInsProbability = [];\r\n    maxSimValsIns = null;\r\n\r\n    for (let n in simValInsNames) {\r\n        if (simValIns[simValInsNames[n]] !== 0) {\r\n           simValInsProbability.push([simValInsNames[n]]);\r\n            simValInsProbability[n].push(simValIns[simValInsNames[n]]); \r\n        } \r\n    }\r\n    maxSimValsIns = simValInsProbability.reverse()[0][1];\r\n    simValInsProbability.reverse();\r\n    //////////////////\r\n    probability = [[noteProbability,maxNoteValue],[dottedProbability,maxDottedValue],\r\n    [groupingProbability,maxGroupingValue]];\r\n    arrayOfProbability = [simpleK,dotsK,groupK];\r\n    //\r\n    //  CHANGING THE LEVEL OF DIFFUCULTY\r\n    if (lvl === 0) {\r\n        lvlK = simpleK-1;\r\n        // linkOut = 0;\r\n    }\r\n    else if (lvl === 1) {\r\n        lvlK = dotsK-1;\r\n        // linkOut = 50;\r\n    } \r\n    else {\r\n        lvlK = 100;\r\n        // linkOut = 100;\r\n    }\r\n}\r\n\r\n// generatingValues();\r\n\r\n export function generatingValues() {\r\n    let bar = [];\r\n    bars = [];\r\n    while (bars.length < barsQuant) {\r\n        let remained = measure - fill;\r\n        let valuesInd = Math.round(Math.random()*(lvlK));\r\n        ind = null;\r\n        arrayOfProbability.forEach((x,index) => {\r\n            if ((valuesInd < x) && (!ind) && (ind!==0) && (remained >= values[index][probability[index][0].length-1][2])) {\r\n                ind = index;\r\n            }\r\n            else if (!ind && ind!==0 && index===probability.length-1) {\r\n                ind = 0;\r\n            }\r\n        })\r\n\r\n        // TUPLET NOT TO FALL ON WEAK BEAT\r\n        if (!Number.isInteger(fill) && (ind === 2) && (dotsK > simpleK) ) {\r\n            ind = 1\r\n        }\r\n        else if (!Number.isInteger(fill) && (ind === 2) && (dotsK < simpleK) ) {\r\n            ind = 0;\r\n        }\r\n            \r\n\r\n        let min = null;\r\n        let safeMin = null;\r\n\r\n        values[ind].forEach((x,index) => {\r\n            if (x[2] <= remained && !min && min!==0) {\r\n                min = index;\r\n                safeMin = index;\r\n                }\r\n            });\r\n\r\n        let linkOutPr = (measure - fill <= 1 && bars.length+1 < barsQuant && linkOut && ind !== 2) ? Math.round(Math.random()*100) : null;\r\n        if (linkOutPr < linkOut && linkOutPr) {\r\n            min = 1;\r\n        } \r\n    \r\n        // GENERATING NEW NOTE VALUE\r\n        generatingIndex(min,fill,ind)\r\n        \r\n        let indInnerInner = insideValue();\r\n\r\n        let checkOut = values[ind][indInner][2] - remained;\r\n        if (measure - fill <= 1 && !values[0].some((x) => x[2] === checkOut) && !values[1].some((y) => y[2] === checkOut) && \r\n        ind !== 2 && checkOut > 0) {\r\n            indInner = safeMin;\r\n        }\r\n       \r\n\r\n        // LINKS OUTSIDE THE BAR\r\n        if (fill + values[ind][indInner][2] > measure) {\r\n            [bar, bars, fill] = groupingOut(bar, bars, indInner, indInnerInner, fill);\r\n        }\r\n\r\n         // GROUPING WITH LINKS INSIDE THE BAR\r\n         else if (linkIns && !Number.isInteger(values[ind][indInner][2] + fill) \r\n         && !Number.isInteger(fill) && fill + values[ind][indInner][2] <= measure \r\n         && values[ind][indInner][2] + fill > Math.ceil(fill) && noteProbability.length < 6 && ind !== 2) {\r\n             [bar, fill] = groupingIns(ind, bar, indInner, indInnerInner, fill);\r\n         }\r\n\r\n        // NO LINKS\r\n        else {\r\n            bar.push([values[ind][indInner][indInnerInner], values[ind][indInner][2]]);\r\n            fill += values[ind][indInner][2];\r\n        }\r\n\r\n        \r\n        \r\n        // GENERATING NOTE VALUES FOR GROUPINGS\r\n        if (values[ind][0][0] === \"whole--triplet\") {\r\n            let barGroup = [];\r\n            generatingGroupingValues(ind,indInner,indInnerInner,barGroup);\r\n            bar.push(barGroup);\r\n        }\r\n\r\n        // FIXING THE BEAT\r\n        if (String(measure - fill).length > 3 && Math.random()*100 <= fixingBeatProb) {\r\n            values[0].forEach((z) => {\r\n                if ((z[2] + fill === Math.ceil(fill) || z[2] + fill === Math.ceil(fill) - beamNum / 2) && String(measure - fill).length > 3) {\r\n                    bar.push([z[0], z[2]]);\r\n                    fill += z[2];\r\n                }\r\n            })\r\n        }\r\n\r\n        // CLOSING THE BAR\r\n        if (fill === measure) {\r\n            let beamFill = 0;\r\n            let beamGr = 0;\r\n            let beamGrNames = [];  \r\n\r\n             // BEAMING EIGHTH, SIXTEENTH AND THIRTY-SECOND\r\n            bar = beaming(beamFill, beamGr, beamGrNames, bar);\r\n            // console.log(\"end\")\r\n            bars.push(bar);\r\n            bar = [];\r\n            fill = 0;\r\n        }\r\n    }\r\n    bars[0].unshift(measure);\r\n    // console.log(bars);\r\n    return bars;\r\n}\r\n\r\n\r\nfunction generatingIndex(minimum,fill,ind,tuplet) {\r\n    let maxVal = (tuplet) ? maxSimValsIns : probability[ind][1];\r\n    indInner = 0;\r\n    let minVal;\r\n    let check = probability[ind][0];\r\n    if (minimum === 0) {\r\n        minVal = 0;\r\n        }\r\n    else if (!tuplet) {\r\n        minVal = Math.round(probability[ind][0][minimum-1][1]);   \r\n    }\r\n\r\n    if (Number.isInteger(fill) && (probability[ind][0].length > minimum+2) && !tuplet) {\r\n        let easyOnB = Math.round(Math.random()*100);\r\n        if (fill === 0 && easyOnB-30 < easyOBProb && probability[ind][0].length > minimum+3) {\r\n            maxVal = probability[ind][0][minimum+3][1];\r\n            }\r\n        else if (easyOnB < easyOBProb) {\r\n            maxVal = probability[ind][0][minimum+2][1];\r\n            }\r\n    }\r\n    \r\n    if(tuplet) {\r\n        minVal = (minimum === 0) ? 0 : simValInsProbability[minimum-1][1];\r\n        check = simValInsProbability;\r\n    }\r\n\r\n    let randomInd = Math.random()*(maxVal-minVal)+minVal;\r\n\r\n    for (let n in check) {\r\n        if (randomInd < check[n][1]) {\r\n            indInner = Number(n);\r\n            return indInner\r\n        }\r\n    }\r\n    return indInner = minimum;\r\n}\r\n\r\n// GENERATING NOTE OR REST, TRIPLET OR QUINTEPLET\r\nfunction insideValue() {\r\n    if (values[ind][0][0] === \"whole--triplet\") {\r\n        let coef = Math.round(Math.random()*100);\r\n        if (coef <= tripletValue ) {\r\n            return 0;\r\n        }\r\n        return 1;\r\n    }\r\n    let coef = Math.round(Math.random()*100);\r\n    if (coef < pauseValue) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n    \r\n}\r\n\r\n// GROUPING OF TUPLETS\r\nfunction generatingGroupingValues(ind, indInner, indInnerInner, barGroup) {\r\n    let measureGroup; // MEASURE OF TUPLET IN QUARTER EQUIVALENT\r\n    if (!indInnerInner) {\r\n        measureGroup = (values[ind][indInner][2])/2*3;\r\n    }\r\n    else {\r\n        measureGroup = (values[ind][indInner][2])/4*5;\r\n    }\r\n    let minGroupEasy = null\r\n    let fillGroup = 0;\r\n    let coefGroup = Math.round(Math.random()*100)-1;\r\n    while (fillGroup < measureGroup) {\r\n        let remainedGroup = measureGroup - fillGroup;\r\n        let minGroup = null;\r\n        let indInnerGroup;\r\n        values[0].forEach((x,index) => {\r\n            if (x[2] <= remainedGroup && !minGroup && minGroup!==0) {\r\n                minGroup = index;\r\n                if (!minGroupEasy) {minGroupEasy = index}\r\n            }\r\n        });\r\n\r\n        if (coefGroup < easyGrouping) {\r\n            if (!indInnerInner) {\r\n                minGroup = minGroupEasy + 1;\r\n            }\r\n            else {\r\n                minGroup = minGroupEasy + 2;\r\n            }\r\n            indInnerGroup = minGroup;\r\n        }\r\n        else {\r\n            let tuplet = 1; // INVOKING SPECIAL ARRAY FOR THE INSIDE OF TUPLETS\r\n            indInnerGroup = generatingIndex(minGroup,fillGroup,0,tuplet);\r\n        }\r\n\r\n        barGroup.push([values[0][indInnerGroup][0], values[0][indInnerGroup][2]]);\r\n        fillGroup += values[0][indInnerGroup][2];\r\n    } \r\n    return barGroup;\r\n}\r\n\r\n// GROUPING WITH LINKS INSIDE THE BAR\r\nfunction groupingIns(ind, bar, indInner, indInnerInner, fill) {\r\n    let remainedIns = Math.ceil(fill) - fill;\r\n    let fillIns = 0;\r\n    let indIns = null\r\n    let run = 0;\r\n    while (remainedIns > 0) {\r\n        let indForCheck = (!run) ? 1 : 0;\r\n        values[indForCheck].forEach((x,index) => {\r\n            if (!indIns && indIns !== 0 && values[indForCheck][index][2] <= remainedIns) {\r\n                if((indForCheck && index < 4) || !indForCheck) {\r\n                    indIns = index;\r\n                    bar.push([((indInnerInner === 0) ?  \"0\" : '') + values[indForCheck][indIns][indInnerInner], values[indForCheck][indIns][2]]);\r\n                    remainedIns -= values[indForCheck][indIns][2];\r\n                    fill += values[indForCheck][indIns][2];\r\n                    fillIns += values[indForCheck][indIns][2];\r\n                }\r\n            }\r\n        });\r\n        run ++;\r\n    }\r\n    remainedIns = values[ind][indInner][2] - fillIns;\r\n    run = 0;\r\n    indIns = null;\r\n    while (remainedIns > 0) {\r\n        if (remainedIns > 1 || run > 1) {\r\n            values[0].forEach((x,index) => {\r\n                if (!indIns && indIns !== 0 && values[0][index][2] <= remainedIns) {\r\n                        indIns = index;\r\n                        bar.push([values[0][indIns][indInnerInner], values[0][indIns][2]]);\r\n                        remainedIns -= values[0][indIns][2];\r\n                        fill += values[0][indIns][2];\r\n                        indIns = null;\r\n                }\r\n            });\r\n        }\r\n        let indForCheck = (!run) ? 1 : 0;\r\n        values[indForCheck].forEach((x,index) => {\r\n            if (!indIns && indIns !== 0 && values[indForCheck][index][2] <= remainedIns) {\r\n                if((indForCheck && index < 4) || !indForCheck) {\r\n                    indIns = index;\r\n                    bar.push([values[indForCheck][indIns][indInnerInner], values[indForCheck][indIns][2]]);\r\n                    remainedIns -= values[indForCheck][indIns][2];\r\n                    fill += values[indForCheck][indIns][2];\r\n                    indIns = null;\r\n                }\r\n            }\r\n        });\r\n        run ++;\r\n    }\r\n\r\n    return [bar, fill];\r\n}\r\n\r\n// LINKS OUTSIDE THE BAR \r\nfunction groupingOut (bar, bars, indInner, indInnerInner, fill) {\r\n    let remainedIns = measure - fill;\r\n    let run = 0;\r\n            let indIns = null;\r\n            while (measure - fill) {\r\n                let indForCheck = (!run) ? 1 : 0;\r\n                values[indForCheck].forEach((x,index) => {\r\n                if (x[2] === remainedIns && !indIns && indIns!==0) {\r\n                    indIns = index;\r\n                    }\r\n                });\r\n                run++\r\n                if (indIns) {\r\n                    bar.push([((indInnerInner === 0) ?  \"1\" : '') + values[indForCheck][indIns][indInnerInner], values[indForCheck][indIns][2]]);\r\n\r\n                    let beamFill = 0;\r\n                    let beamGr = 0;\r\n                    let beamGrNames = []; \r\n                    bar = beaming(beamFill, beamGr, beamGrNames, bar);\r\n                    \r\n                    bars.push(bar);\r\n                    fill += values[indForCheck][indIns][2];\r\n                }\r\n            }\r\n            \r\n            bar = [];\r\n            fill = 0;\r\n            run = 0;\r\n            while (fill !== values[ind][indInner][2] - remainedIns) {\r\n                indIns = null;\r\n                let indForCheck = (!run) ? 1 : 0;\r\n                values[indForCheck].forEach((x,index) => {\r\n                    if (x[2] === values[ind][indInner][2] - remainedIns && !indIns && indIns!==0) {\r\n                        indIns = index;\r\n                        }\r\n                    });\r\n                run ++;\r\n                if (indIns) {\r\n                    bar.push([values[indForCheck][indIns][indInnerInner], values[indForCheck][indIns][2]]);\r\n                    fill += values[indForCheck][indIns][2];\r\n            }\r\n                \r\n            }\r\n            return [bar, bars, fill];\r\n}\r\n\r\n// BEAMING EIGHTH, SIXTEENTH AND THIRTY-SECOND\r\nfunction beaming(beamFill, beamGr, beamGrNames, bar, tup) {\r\n    let gr = 0;\r\n    bar.forEach((x, index) => {           \r\n        beamFill += x[1];\r\n        if (Array.isArray(x[0])) {\r\n            x = beaming(0, 0, [], x, true);\r\n            gr = 0;\r\n            beamGr = 0;\r\n            beamGrNames = [];\r\n            return;\r\n        }\r\n            if (names4Beaming[0].test(x[0]) && !names4Beaming[1].test(x[0])) { // DIVIDING EIGHTH+SIXTEENTH,THIRTY-SECOND BY BEAT\r\n                beamGr += x[1];\r\n                beamGrNames.push(x[0]);\r\n            }\r\n            else {\r\n                beamGr = 0;\r\n                beamGrNames = [];\r\n            }\r\n            if (beamGr > beamNum || beamGr === beamNum && !beamGrNames.some((y) => (/sixteenth|thirty-second/).test(y))) {\r\n                beamGr = 0;\r\n                beamGrNames = [];\r\n            }\r\n\r\n        if ((/rest/).test(x[0])) {      // GROUPING RESTS\r\n            let a = null;\r\n            if (index+1 <= bar.length-1 && (/rest/).test(bar[index+1][0]) && groupRest) {\r\n                \r\n                values.forEach((z) => z.forEach((y) => {\r\n                    if (y[2] === x[1]+bar[index+1][1] && !a) {\r\n                        // console.log(x[0])\r\n                        bar[index][0] = y[1];\r\n                        bar[index][1] = y[2];\r\n                        beamFill += bar[index+1][1];\r\n                        a = true;\r\n                        // console.log(x[0]);\r\n                        // console.log(\"end\");\r\n                    }\r\n                }))\r\n\r\n                if (a) {\r\n                    bar.splice(index+1,1);\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n            if (!names4Beaming[0].test(x[0])) {\r\n                return;\r\n            }\r\n            else if (names4Beaming[1].test(x[0])) {\r\n                return;\r\n            }\r\n            if (index+1 <= bar.length-1 && (names4Beaming[0].test(bar[index+1][0]) && !names4Beaming[1].test(bar[index+1][0])) && !(/triplet|quinteplet/).test(bar[index][0])) {\r\n\r\n\r\n\r\n                                // START OF THE GROUP\r\n                                if (beamGr === x[1] && beamFill !== measure/2 && (index === 0 || !(/--st|--gr/).test(bar[index-1][0]) || Array.isArray(bar[index-1][0])) &&\r\n                                 (index === 0 || !((/rest/).test(bar[index-1][0]) && Number.isInteger(beamFill) && showBeat)) && (index<=bar.length-1 && !(/triplet|quinteplet/).test(bar[index+1][0])) ) {\r\n\r\n                                    if ((/eighth/).test(x[0])) {                           \r\n                                        bar[index][0] = bar[index][0] + \"--st\";\r\n                                    }\r\n                                    else if ((new RegExp((x[0].match(/\\D/g)).join(\"\"))).test(bar[index+1][0]) || ((/sixteenth|thirty-second/).test(x[0]) && (/sixteenth|thirty-second/).test(bar[index+1][0])) ) {\r\n                                        bar[index][0] = bar[index][0] + \"--1--st\";\r\n                                    }\r\n                                    else {\r\n                                        bar[index][0] = bar[index][0] + \"--0--st\";\r\n                                    }\r\n                                    gr++;\r\n                                    \r\n                                }\r\n\r\n                                // MIDDLE SECTION\r\n                                else if (index>0 && (/--st|--gr/).test(bar[index-1][0]) && (beamFill !== measure/2 && beamGr !== beamNum || tup) && gr &&\r\n                                (index<=bar.length-1 && !(/triplet|quinteplet/).test(bar[index+1][0])) ) {                                 \r\n                                    if ((/eighth/).test(x[0])) {                           \r\n                                        bar[index][0] = bar[index][0] + \"--gr\";\r\n                                        }\r\n                                        else if (!(new RegExp((x[0].match(/\\D/g)).join(\"\"))).test(bar[index+1][0]) && \r\n                                        !(new RegExp((x[0].match(/\\D/g)).join(\"\"))).test(bar[index-1][0]) && !((/sixteenth|thirty-second/).test(x[0]) && (/sixteenth|thirty-second/).test(bar[index+1][0]))) {\r\n                                            bar[index][0] = bar[index][0] + \"--2--gr\";\r\n                                        }\r\n                                        else if ((new RegExp((x[0].match(/\\D/g)).join(\"\"))).test(bar[index+1][0]) || ((/sixteenth|thirty-second/).test(x[0]) && (/sixteenth|thirty-second/).test(bar[index+1][0]))) {\r\n                                            bar[index][0] = bar[index][0] + \"--1--gr\";\r\n                                        }\r\n                                        else {\r\n                                            bar[index][0] = bar[index][0] + \"--0--gr\";\r\n                                        } \r\n                                    gr ++;\r\n                                }   \r\n                                \r\n                                \r\n                            }\r\n\r\n                            // ENDING SECTION\r\n                            if (!(/--st|--gr/).test(x[0]) && index>0 && (/--st|--gr/).test(bar[index-1][0]) && gr &&\r\n(index === bar.length-1 || beamGr === beamNum || beamFill === measure/2 || !names4Beaming[0].test(bar[index+1][0]) || names4Beaming[1].test(bar[index+1][0]) || (/triplet|quinteplet/).test(bar[index+1][0])) ) {\r\n                                if ((/eighth/).test(x[0])) {                            \r\n                                    bar[index][0] = bar[index][0] + \"--end\";\r\n                                }\r\n                                else if ((new RegExp((x[0].match(/\\D/g)).join(\"\"))).test(bar[index-1][0])) {\r\n                                    bar[index][0] = bar[index][0] + \"--1--end\";\r\n                                }\r\n                                else {\r\n                                    bar[index][0] = bar[index][0] + \"--0--end\";\r\n                                }\r\n                                beamGr = 0;\r\n                                beamGrNames = [];\r\n                                gr = 0;\r\n                                \r\n                            }\r\n                        if (!(/--st|--gr|--end/).test(x[0])) {\r\n                            beamGr = 0;\r\n                            beamGrNames = [];\r\n                        }\r\n\r\n        }\r\n        \r\n    })\r\nreturn bar;\r\n}","import React from 'react';\nimport tick01 from \"../src/Sounds/metro_1.mp3\";\nimport tick02 from \"../src/Sounds/metro_other.mp3\";\nimport note01 from \"../src/Sounds/clap01.mp3\";\nimport {updateData, generatingValues, measureReassign} from './notes';\n\nlet testArr = [];\n\nlet valInTup = [{\n  half: 1.333333333333333,\n  quarter: 0.6666666666666667,\n  eighth: 0.3333333333333333,\n  sixteenth: 0.1666666666666667,\n  thirty: 0.0833333333333333\n}, {\n  quarter: 0.8,\n  eighth: 0.4,\n  sixteenth: 0.2,\n  thirty: 0.1\n}];\n\n\n\nlet reading;\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {bars: [], barsQuant: 16, measure: \"four_quarters\", pauseValue: 10, easyOBProb: 20, tripletValue: 90, groupRest: true, showBeat: false, bpm: 60,\n    easyGrouping: 95, linkIns: true, linkOut: 50, lvl: 2, simpleK: 50, dotsK: -0.1, groupK: 60, beat: true, beatNumb: true, beamNum: 1, receivedVal: [], receivedValTimeouts: [],  \n    noteValues: {whole: 5, half: 11, quarter: 15, eighth: 35, sixteenth: 36, thirtySecond: 0},\n    dottedValues: {whole: -0.1, half: 5, quarter: 10, eighth: 30, sixteenth: 0, thirtySecond: 0},\n    groupingValues: {whole: -0.1, half: 3, quarter: 10, eighth: 12}, \n    simValIns: {whole: -0.1, half: 5, quarter: 15, eighth: 20, sixteenth: 25, thirtySecond: 0},\n    metronome: []};\n\n  this.tick01 = React.createRef();\n  this.tick02 = React.createRef();\n  this.note01 = React.createRef();\n\n\n  this.nextGen = this.nextGen.bind(this);\n  this.beat = this.beat.bind(this);\n  this.beatNumb = this.beatNumb.bind(this);\n  this.beatReading = this.beatReading.bind(this);\n  this.beatReadingFunc = this.beatReadingFunc.bind(this);\n  this.stop = this.stop.bind(this);\n  }\n\n  nextGen() {\n    console.clear();\n    let arr = [];\n    let tupletState;\n    this.setState({bars: generatingValues()});\n    setTimeout(() => {                              // RECORDING THE DURATION VALUES IS ARRAY\n      this.state.bars.forEach((x) => {\n      x.forEach((y) => {\n        if ((/triplet/).test(y[0])) {\n          tupletState = 0;\n        }\n        else if ((/quinteplet/).test(y[0])) {\n          tupletState = 1;\n        }\n\n        if (!(/triplet|quinteplet/).test(y[0]) && Array.isArray(y)) {\n          if (Array.isArray(y[0])) {\n            for (let n in y){\n              arr.push(valInTup[tupletState][y[n][0].match(/[a-z]+/).join(\"\")])\n            }\n          }\n          else {\n            arr.push(y[1])\n          }\n          \n        }\n      })\n    })\n\n    this.setState({receivedVal: arr})\n\n    }, 50);\n    \n  }\n\n  beat() {\n    this.setState({\n      beat: !this.state.beat\n    });\n  }\n\n  beatNumb() {\n    this.setState({\n      beatNumb: !this.state.beatNumb\n    })\n  }\n\n  beatReading() {\n    this.tick01.current.volume = 0.3;\n    this.tick02.current.volume = 0.2;\n    let metronomeTemp = [];\n    let metronomeFill = 0;\n    let wholeBar = measureReassign[this.state.measure] / (this.state.bpm / 60) * 1000;\n\n    this.tick01.current.play();\n    metronomeTemp.push(setInterval(()=> this.tick01.current.play(), wholeBar));\n\n    metronomeFill += wholeBar / measureReassign[this.state.measure];\n    while (metronomeFill < wholeBar) {\n      setTimeout(() => {\n        metronomeTemp.push(setInterval(()=> this.tick02.current.play(), wholeBar));\n        this.tick02.current.play();\n      }, metronomeFill); \n      metronomeFill += wholeBar / measureReassign[this.state.measure];\n    }\n\n    this.setState({metronome: metronomeTemp});\n\n\n    setTimeout(this.beatReadingFunc, measureReassign[this.state.measure] / (this.state.bpm / 60) * 1000 - 50);\n  }\n\n  beatReadingFunc() {\n    let arr = Array.from(document.querySelectorAll(\".value\"));\n    let temp = [];\n    arr.shift();\n    let fill = 0;\n\n    arr[0].classList.toggle(\"value--animation\");\n    testArr[0].load();\n    testArr[0].play();\n    for (let n in arr) {\n      fill += 1000 * this.state.receivedVal[n] / (this.state.bpm / 60);\n      if (Number(n)+1 <= arr.length-1) {\n        temp.push(setTimeout(() => {\n          arr[Number(n)+1].classList.toggle(\"value--animation\");\n\n          if (!(/--rest/).test(arr[Number(n)+1].className)) {\n            let rand = Math.floor(Math.random()*40);\n            testArr[rand].load();\n            testArr[rand].play();\n          }\n          \n        }, fill));\n      }\n    }\n    this.setState({receivedValTimeouts: temp})\n    reading = setTimeout(this.stop, fill - 100)\n  }\n  \n  stop() {\n    let arr = Array.from(document.querySelectorAll(\".value\"));\n    arr.shift();\n    let tempRead = this.state.receivedValTimeouts;\n    let tempMetronome = this.state.metronome;\n    for (let n in tempRead) {\n      clearTimeout(tempRead[n]);\n      if (arr[n].classList.contains(\"value--animation\")) {\n        arr[n].classList.toggle(\"value--animation\")\n      }\n    }\n\n    for (let n in tempMetronome) {\n      clearTimeout(tempMetronome[n])\n    }\n\n    clearTimeout(reading);\n  }\n\n  componentDidMount() {\n    updateData(this.state);\n\n    for (let i = 0; i < 20; i ++) {\n      let sound = this.note01.current;\n      sound.volume = 0.2;\n      testArr.push(sound);\n      let soundClone = sound.cloneNode(true);\n      soundClone.volume = 0.2;\n      testArr.push(soundClone);\n    }\n    \n  } \n  render() {\n    let bars = this.state.bars;\n    return (\n      <div>\n        <div>\n        <audio ref={this.tick01}>\n      <source src={tick01} type=\"audio/mpeg\"></source>\n        </audio>\n        <audio ref={this.tick02}>\n          <source src={tick02} type=\"audio/mpeg\"/>\n        </audio>\n        <audio ref={this.note01}>\n          <source src={note01} type=\"audio/mpeg\"/>\n        </audio>\n        </div>\n        <header>\n          <h1>Welcome to <strong>Score Gym</strong></h1>\n            <nav>\n              <div>Beginner, Intermediate, Expert</div>\n              <div></div>\n              <button onClick={this.nextGen}>NextGen</button>\n              <button onClick={this.beat}>Beat</button>\n              <button onClick={this.beatNumb}>Num</button>\n              <button onClick={this.beatReading}>Reading</button>\n              <button onClick={this.stop}>Stop</button>\n            </nav>\n              <div className=\"settings\">SETTINGS: #measures, #number_of_bars, #bpm, #licked_notes</div>\n              <div className=\"info\">#Info, #tutorial</div>\n        </header>\n        <div className=\"score_body\">\n          <div className=\"score\">\n          {bars.map((x, index) => {\n            let beat = 0;\n            let count = 0;\n            return <div className={(bars.length-1 === index) ? \"bar bar_last\" : ((index === 0) ? \"bar bar_first\" : \"bar\")}>\n              <div className=\"bar__inside\"> \n              {x.map((y, ind) => {\n\n                if (ind+1 <= x.length-1 && Array.isArray(x[ind+1][0])) {\n                  beat += y[1];\n                  return <div style={{position: \"relative\", height: \"118px\"}}>\n                    <span className=\"tuplet__num\">{(/triplet/).test(y[0]) ? 3 : 5}</span>\n                    {(( (ind === 0 && Array.isArray(y)) || (ind === 1 && beat === y[1]) || Number.isInteger(beat-y[1]) || (ind === x.length-1 && y[1] === this.state.beamNum) ) && count < this.state.measure ? (<div key={beat+y[0]} className=\"beat\" style={this.state.beat ? ((/rest|whole/).test(y[0]) ? ({opacity: \"100%\", top:\"100%\", left:\"5px\"}) : ((/--end/).test(y[0]) ? ({opacity: \"100%\", left: \"10px\"}) : ({opacity: \"100%\"}))) : {opacity: \"0%\"}}><div style={this.state.beatNumb ? {opacity:\"1\"} : {opacity:\"0\"}}>{beat-y[1] + 1}</div><span style={{display: \"none\"}}>{count ++ }</span></div>) : null)}\n                    <div className={(/triplet/).test(y[0]) ? \"triplet\" : \"quinteplet\"}>\n                    {x[ind+1].map((z, indI) => {\n                      if (!indI) {\n                        return <div className={\"value \" + z[0]} style={{marginLeft: \"0\"}} key={z[0]+String(index)}></div>\n                      }\n                      else if (indI === x[ind+1].length-1) {\n                        return <div className={\"value \" + z[0]} style={{marginRight: \"0\"}} key={z[0]+String(index)}></div>\n                      }\n                      else {\n                        return <div className={\"value \" + z[0]} key={z[0]+String(index)}></div>\n                      }\n                      \n                    })}\n                    </div>\n                    </div>\n                }\n\n                else if (Array.isArray(y[0])) {\n                  return;\n                }\n\n                else {\n                let link = null;\n               if (Array.isArray(y) && (y[0][0] === '0' || y[0][0] === '1')) { // DETERMINING WHERE IS THE LINK\n                 let elem = y[0].split(\"\");\n                 link = Number(elem.splice(0, 1));\n                 y[0] = elem.join(\"\");\n               }\n               let ch;\n               if (Array.isArray(y)) {                    // CORRECTING THE POSITION OF THE LINK\n                 let elem = y[0].split(\"\");\n                 elem.reverse();\n                 ch = elem.slice(0, 3)\n                          .join(\"\");\n                beat += y[1];\n               }\n                return <div className={Array.isArray(y) ? (\"value \" + y[0]) : (\"value  \" + this.state.measure)} id={index+ind}>\n                  <Linked link={link} ch={ch} ind={ind} bars={this.state.bars} />\n                  {(( (ind === 0 && Array.isArray(y)) ||( ind === 1 && beat === y[1]) || Number.isInteger(beat-y[1]) || (ind === x.length-1 && y[1] === this.state.beamNum) ) && count < measureReassign[this.state.measure] ? (<div key={beat+y[0]} className=\"beat\" style={this.state.beat ? ((/rest|whole/).test(y[0]) ? ({opacity: \"100%\", top:\"100%\", left:\"5px\"}) : ((/--end/).test(y[0]) ? ({opacity: \"100%\", left: \"10px\"}) : ({opacity: \"100%\"}))) : {opacity: \"0%\"}}><div style={this.state.beatNumb ? {opacity:\"1\"} : {opacity:\"0\"}}>{beat-y[1] + 1}</div><span style={{display: \"none\"}}>{count ++ }</span></div>) : null)}\n                  </div>\n                }\n            })}\n            </div>\n            </div>\n            \n          })\n          }\n\n          </div>\n\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nclass Linked extends React.Component {\nshouldComponentUpdate(nextState) {\n  if (this.props.bars !== nextState.bars) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\nrender () {\n  let st = null;\n  if (this.props.ch === \"dne\" && this.props.link === 0) {\n    st = {left: \"38px\", width: \"15px\",top: \"-21px\",height: \"40px\"}\n  }\n\n  return <div>{(this.props.link !== null) ? (<div style={st} key={this.props.ch+this.props.ind} className={(this.props.link===0) ? \"linked_in\" : \"linked_out\"}></div>) : null}</div>\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}